trigger:
- main

pool:
  name: Default

variables:
  bicepArtifactName: biceps
  dockerRegistryUrl: 'platformsreacr.azurecr.io'
  imageName: 'sampleweb'
  imageTag: 'latest'
  dockerRegistryServiceConnection: 'proton-account-docker-conn-01'
  resourceGroupName: 'platformsre-rg'
  acrUsername: 'fbf448d4-e1c4-46c6-88ac-8d740cf857ad'
  acrPassword: 'JFY8Q~k~jtd6NZMNTiI~eTGnUH0ZXWrsLBo_.bdc'

jobs:
- job: Build
  workspace:
    clean: all    
  displayName: 'Publish bicep to artifact'  
  steps:
  - task: Docker@2
    displayName: 'Build and Push Docker image'
    inputs:
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      repository: '$(dockerRegistryUrl)/$(imageName)'
      tags: |
        $(imageTag)
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)


  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/biceps'
      artifactName: $(bicepArtifactName)
    displayName: 'publish biceps to Azure DevOps - $(bicepArtifactName)'

- deployment: Deploy
  environment: platformsre-test
  dependsOn: Build 
  displayName: 'Deploy To Azure'
  strategy:
    runOnce:
      deploy:
        steps:
        # - task: AzureResourceManagerTemplateDeployment@3
        #   displayName: 'Deploy Biceps files'        
        #   inputs:
        #     deploymentScope: 'Resource Group'
        #     azureResourceManagerConnection: proton-account-svc-conn-01
        #     subscriptionId: 'd7ab4684-6d5e-4bd3-a6c5-93965b7c0cdc'
        #     action: 'Create Or Update Resource Group'
        #     resourceGroupName: $(resourceGroupName)
        #     location: 'swedencentral'
        #     templateLocation: 'Linked artifact'
        #     csmFile: '$(Pipeline.Workspace)/$(bicepArtifactName)/main.bicep'
        #     deploymentMode: 'Incremental'

        - task: AzureCLI@2
          displayName: 'Deploy Docker container'
          inputs:
            azureSubscription: 'proton-account-svc-conn-01'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Check if the container group exists
              EXISTS=$(az container show --name sampleweb-ci --resource-group $(resourceGroupName) --query "name" --output tsv 2>/dev/null)
              
              if [ ! -z "$EXISTS" ]; then
                echo "Container group exists, deleting..."
                az container delete --name sampleweb-ci --resource-group $(resourceGroupName) --yes
              fi
              
              echo "Creating new container group..."
              az container create \
                --resource-group $(resourceGroupName) \
                --name sampleweb-ci \
                --image $(dockerRegistryUrl)/$(imageName):$(imageTag) \
                --dns-name-label platformsre-sampleweb \
                --ports 80 \
                --registry-login-server $(dockerRegistryUrl) \
                --registry-username $(acrUsername) \
                --registry-password $(acrPassword)             



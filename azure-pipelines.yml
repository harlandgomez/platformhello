trigger:
- main

pool:
  name: Default

variables:
- group: platformsre-test
- name: bicepArtifactName
  value: biceps
- name: dockerRegistryUrl
  value: 'platformsreacr.azurecr.io'
- name: imageName
  value: 'sampleweb'
- name: imageTag
  value: 'latest'
- name: resourceGroupName
  value: 'platformsre-rg'
- name: dnsLabeName
  value: platformsre-sampleweb  

jobs:
- job: Build
  workspace:
    clean: all    
  displayName: 'Publish bicep to artifact'  
  steps:
  - task: Docker@2
    displayName: 'Build and Push Docker image'
    inputs:
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      repository: '$(dockerRegistryUrl)/$(imageName)'
      tags: |
        $(imageTag)
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/biceps'
      artifactName: $(bicepArtifactName)
    displayName: 'publish biceps to Azure DevOps - $(bicepArtifactName)'

- deployment: Deploy
  environment: platformsre-test
  dependsOn: Build 
  displayName: 'Deploy To Azure'
  strategy:
    runOnce:
      deploy:
        steps:
        - task: AzureCLI@2
          displayName: 'Deploy Biceps with Azure CLI'                
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              EXISTS=$(az container show --name sampleweb-ci --resource-group $(resourceGroupName) --query "id" --output tsv 2>/dev/null)
              
              if [ ! -z "$EXISTS" ]; then
                echo "Container group exists, deleting..."
                az container delete --name sampleweb-ci --resource-group $(resourceGroupName) --yes
              fi

              echo "Deploying new container group..."
              az deployment group create \
                --resource-group $(resourceGroupName) \
                --template-file $(Pipeline.Workspace)/biceps/main.bicep \
                --parameters acrUserName=$(acrUsername) acrPassword=$(acrPassword)
          
        - task: AzureCLI@2
          displayName: 'Deploy Docker container'
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              EXISTS=$(az container show --name sampleweb-ci --resource-group $(resourceGroupName) --query "name" --output tsv 2>/dev/null)
              
              if [ ! -z "$EXISTS" ]; then
                echo "Container group exists, deleting..."
                az container delete --name sampleweb-ci --resource-group $(resourceGroupName) --yes
              fi
              
              echo "Creating new container group..."
              az container create \
                --resource-group $(resourceGroupName) \
                --name sampleweb-ci \
                --image $(dockerRegistryUrl)/$(imageName):$(imageTag) \
                --dns-name-label $(dnsLabeName) \
                --ports 80 \
                --registry-login-server $(dockerRegistryUrl) \
                --registry-username $(acrUsername) \
                --registry-password $(acrPassword)             


